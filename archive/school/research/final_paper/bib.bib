
@techreport{shapiro_comprehensive_2011,
	type = {report},
	title = {A comprehensive study of {Convergent} and {Commutative} {Replicated} {Data} {Types}},
	url = {https://hal.inria.fr/inria-00555588},
	abstract = {Eventual consistency aims to ensure that replicas of some mutable shared object converge without foreground synchronisation. Previous approaches to eventual consistency are ad-hoc and error-prone. We study a principled approach: to base the design of shared data types on some simple formal conditions that are sufficient to guarantee eventual consistency. We call these types Convergent or Commutative Replicated Data Types (CRDTs). This paper formalises asynchronous object replication, either state based or operation based, and provides a sufficient condition appropriate for each case. It describes several useful CRDTs, including container data types supporting both {\textbackslash}add and {\textbackslash}remove operations with clean semantics, and more complex types such as graphs, montonic DAGs, and sequences. It discusses some properties needed to implement non-trivial CRDTs.},
	language = {en},
	urldate = {2020-02-17},
	institution = {Inria – Centre Paris-Rocquencourt ; INRIA},
	author = {Shapiro, Marc and Preguiça, Nuno and Baquero, Carlos and Zawirski, Marek},
	month = jan,
	year = {2011},
	pages = {50}
}

@book{kleppmann_designing_2017,
	title = {Designing {Data}-{Intensive} {Applications}},
	isbn = {9781491903100},
	url = {https://dataintensive.net/},
	publisher = {O'Reilly},
	author = {Kleppmann, Martin},
	year = {2017}
}

@misc{noauthor_invariant_nodate,
	title = {Invariant {Safety} for {Distributed} {Applications} {\textbar} {Proceedings} of the 6th {Workshop} on {Principles} and {Practice} of {Consistency} for {Distributed} {Data}},
	url = {https://dl.acm.org/doi/abs/10.1145/3301419.3323970},
	urldate = {2020-02-05}
}

@inproceedings{tschudin_end--end_2018,
	address = {Boston, Massachusetts},
	series = {{ICN} '18},
	title = {End-to-end encrypted scalable abstract data types over {ICN}},
	isbn = {9781450359597},
	url = {https://doi.org/10.1145/3267955.3267962},
	doi = {10.1145/3267955.3267962},
	abstract = {In Information Centric Networking (ICN), data items are made accessible through their name rather than their storage location. We extend this storage abstraction and complement it via a name lookup service for retrieving the latest version of a name binding in order to implement abstract data types (ADT), specifically "append-only logs" and "mutable key-value stores". Moreover, we make these data types scalable by choosing implementation techniques known as CRDTs (conflict-free replicated data types) and we use end-to-end encryption for protecting the content and structure against untrusted storage providers and forwarding elements. In this paper we describe our architecture, the interface to the ADTs and report on a prototype implementation for the cloud that is inspired by a real Fintech use case.},
	urldate = {2020-02-05},
	booktitle = {Proceedings of the 5th {ACM} {Conference} on {Information}-{Centric} {Networking}},
	publisher = {Association for Computing Machinery},
	author = {Tschudin, Christian},
	month = sep,
	year = {2018},
	pages = {88--94}
}

@inproceedings{bauwens_memory_2019,
	address = {Athens, Greece},
	series = {{VMIL} 2019},
	title = {Memory efficient {CRDTs} in dynamic environments},
	isbn = {9781450369879},
	url = {https://doi.org/10.1145/3358504.3361231},
	doi = {10.1145/3358504.3361231},
	abstract = {Modern distributed applications increasingly replicate data in order to guarantee both high availability of systems and an optimal user experience. Conflict-Free Replicated Data Types (CRDTs) are a family of data types specially designed for highly available systems which guarantee some form of eventual consistency. However, memory usage may grow unboundedly in their implementations, as garbage collection of meta-data is not tackled in most approaches. In this paper, we explore a memory management model for operation-based CRDTs in dynamic setting, where nodes can dynamically join a network, and where the implementation can remove unnecessary meta-data employed by CRDTs used to determine the order of operations applied in different replicas. We first describe how new nodes will be brought up-to-date and fully linked with other replicas, and later we introduce our memory management model which allows meta-data to be removed. We benchmark the memory usage of an add-wins set using different garbage collection techniques in various situations and show how our approach can be beneficial in comparison to state of the art techniques.},
	urldate = {2020-02-05},
	booktitle = {Proceedings of the 11th {ACM} {SIGPLAN} {International} {Workshop} on {Virtual} {Machines} and {Intermediate} {Languages}},
	publisher = {Association for Computing Machinery},
	author = {Bauwens, Jim and Gonzalez Boix, Elisa},
	month = oct,
	year = {2019},
	keywords = {CRDTs, Dynamic networks, Memory management, Replication},
	pages = {48--57}
}

@inproceedings{navalho_incremental_2013,
	address = {Prague, Czech Republic},
	series = {{CloudDP} '13},
	title = {Incremental stream processing using computational conflict-free replicated data types},
	isbn = {9781450320757},
	url = {https://doi.org/10.1145/2460756.2460762},
	doi = {10.1145/2460756.2460762},
	abstract = {Information has become a key commodity for most service providers. Analyzing streams of data efficiently, in real time, has become increasingly more important for supporting new products and applications. This paper outlines a novel abstraction for performing incremental stream processing based on Computational Conflict-free Replicated Data Types. C-CRDTs are replicated objects that can be updated concurrently without coordination to perform a computation and still converge to a consistent state that reflects all contributions. Results obtained with a preliminary prototype show that C-CRDTs have the potential to match and improve computational throughput when compared with a state of the art stream processing system.},
	urldate = {2020-02-05},
	booktitle = {Proceedings of the 3rd {International} {Workshop} on {Cloud} {Data} and {Platforms}},
	publisher = {Association for Computing Machinery},
	author = {Navalho, David and Duarte, Sérgio and Preguiça, Nuno and Shapiro, Marc},
	month = apr,
	year = {2013},
	keywords = {distributed processing, incremental computation, real time, stream processing},
	pages = {31--36}
}

@inproceedings{tao_name_2015,
	address = {Tokyo, Japan},
	series = {{APSys} '15},
	title = {A {Name} {Is} {Not} {A} {Name}: {The} {Implementation} {Of} {A} {Cloud} {Storage} {System}},
	isbn = {9781450335546},
	shorttitle = {A {Name} {Is} {Not} {A} {Name}},
	url = {https://doi.org/10.1145/2797022.2797034},
	doi = {10.1145/2797022.2797034},
	abstract = {The automatic resolution for resolving conflict updates in cloud storage services has been well studied, however, how to correctly implement the resolution in real-world systems remains challenging. In this paper, we present the challenges we experienced when implementing our cloud storage system. They include (1) detecting the intended object for an update when the intended object has been automatically changed by the conflict resolution, and (2) producing no different intermediate results when resolving the conflict updates from more than two replicas. We present our solution of using the mechanism of the conflict resolution to redirect an update to its intended object and of using Conflict-Free Replicated Data Type (CRDT) for a "clean" implementation of conflict resolution without different intermediate results.},
	urldate = {2020-02-05},
	booktitle = {Proceedings of the 6th {Asia}-{Pacific} {Workshop} on {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Tao, Vinh and Rancurel, Vianney and Neto, João},
	month = jul,
	year = {2015},
	pages = {1--8}
}

@article{gomes_verifying_2017,
	title = {Verifying strong eventual consistency in distributed systems},
	volume = {1},
	url = {https://doi.org/10.1145/3133933},
	doi = {10.1145/3133933},
	abstract = {Data replication is used in distributed systems to maintain up-to-date copies of shared data across multiple computers in a network. However, despite decades of research, algorithms for achieving consistency in replicated systems are still poorly understood. Indeed, many published algorithms have later been shown to be incorrect, even some that were accompanied by supposed mechanised proofs of correctness. In this work, we focus on the correctness of Conflict-free Replicated Data Types (CRDTs), a class of algorithm that provides strong eventual consistency guarantees for replicated data. We develop a modular and reusable framework in the Isabelle/HOL interactive proof assistant for verifying the correctness of CRDT algorithms. We avoid correctness issues that have dogged previous mechanised proofs in this area by including a network model in our formalisation, and proving that our theorems hold in all possible network behaviours. Our axiomatic network model is a standard abstraction that accurately reflects the behaviour of real-world computer networks. Moreover, we identify an abstract convergence theorem, a property of order relations, which provides a formal definition of strong eventual consistency. We then obtain the first machine-checked correctness theorems for three concrete CRDTs: the Replicated Growable Array, the Observed-Remove Set, and an Increment-Decrement Counter. We find that our framework is highly reusable, developing proofs of correctness for the latter two CRDTs in a few hours and with relatively little CRDT-specific code.},
	number = {OOPSLA},
	urldate = {2020-02-05},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Gomes, Victor B. F. and Kleppmann, Martin and Mulligan, Dominic P. and Beresford, Alastair R.},
	month = oct,
	year = {2017},
	keywords = {CRDTs, automated theorem proving, convergence, distributed systems, replication, strong eventual consistency, verification},
	pages = {109:1--109:28}
}

@inproceedings{tao_merging_2015,
	address = {Haifa, Israel},
	series = {{SYSTOR} '15},
	title = {Merging semantics for conflict updates in geo-distributed file systems},
	isbn = {9781450336079},
	url = {https://doi.org/10.1145/2757667.2757683},
	doi = {10.1145/2757667.2757683},
	abstract = {We present our model of file systems and our merging semantics for resolving conflict updates in geo-distributed file systems. The system model fully describes a file system with all of its components including hard links. This model is able to identify all conflict cases which are classified into direct, such as concurrent updates to the same file, and indirect, such as cycles in the namespace of the file system. The merging semantics resolve all types of conflicts while being able to preserve the effect of all conflict updates. Our implementation of the system and the merging semantics outperforms the existing systems in terms of feature completeness.},
	urldate = {2020-02-05},
	booktitle = {Proceedings of the 8th {ACM} {International} {Systems} and {Storage} {Conference}},
	publisher = {Association for Computing Machinery},
	author = {Tao, Vinh and Shapiro, Marc and Rancurel, Vianney},
	month = may,
	year = {2015},
	keywords = {CRDT, algorithm, conflict resolution, eventual consistency, geo-distributed file system, state-based replication},
	pages = {1--12}
}

@inproceedings{balegas_making_2016,
	address = {London, United Kingdom},
	series = {{PaPoC} '16},
	title = {Making weak consistency great again},
	isbn = {9781450342964},
	url = {https://doi.org/10.1145/2911151.2911167},
	doi = {10.1145/2911151.2911167},
	abstract = {This paper focuses on the problem of implementing web applications on top of weakly consistent geo-replicated systems. Several techniques, such as CRDTs, have been proposed to achieve state convergence on a per-object and per-data type basis. However, that does not guarantee application correctness, as convergence rules applied individually at each object may lead to an invalid state. We advocate that it is possible to address these problems and implement correct applications under weak consistency. To that end, it is necessary to combine CRDTs with novel semantics, judiciously select the CRDTs that are used by applications, and transform application operations to guarantee that convergence rules, applied on a per-object basis, always lead to valid application states. Achieving this is complex and requires tools to help programmers tame the complexity of programming on top of weak consistency and make the technology more accessible. In the presentation of this work we make a demonstration of a prototype tool that is capable of detecting concurrency conflicts on applications and propose transformations to make them conflict-free.},
	urldate = {2020-02-05},
	booktitle = {Proceedings of the 2nd {Workshop} on the {Principles} and {Practice} of {Consistency} for {Distributed} {Data}},
	publisher = {Association for Computing Machinery},
	author = {Balegas, Valter and Duarte, Sérgio and Ferreira, Carla and Preguiça, Nuno and Rodrigues, Rodrigo},
	month = apr,
	year = {2016},
	keywords = {CRDT, geo-replication, weak consistency},
	pages = {1--3}
}

@inproceedings{jungnickel_pluto:_2017,
	address = {Belgrade, Serbia},
	series = {{PaPoC} '17},
	title = {pluto: {The} {CRDT}-{Driven} {IMAP} {Server}},
	isbn = {9781450349338},
	shorttitle = {pluto},
	url = {https://doi.org/10.1145/3064889.3064891},
	doi = {10.1145/3064889.3064891},
	abstract = {A typical cloud deployment of an IMAP service follows the service-statelessness principle, i.e. a load balancer distributes the requests to a mostly stateless backend that stores application state on a network file system like NFS. Within this work we suggest an alternative architecture allowing the backend to maintain its own replica of application state, leading to shorter response times and increased fault tolerance. To ensure convergence among replicas, we use CRDTs to model application state and evaluate the performance of our prototypical implementation against the de facto standard IMAP server Dovecot in multiple experimentation settings.},
	urldate = {2020-02-05},
	booktitle = {Proceedings of the 3rd {International} {Workshop} on {Principles} and {Practice} of {Consistency} for {Distributed} {Data}},
	publisher = {Association for Computing Machinery},
	author = {Jungnickel, Tim and Oldenburg, Lennart},
	month = apr,
	year = {2017},
	keywords = {CRDT, Cloud Deployments, Consistency Control, IMAP},
	pages = {1--5}
}

@inproceedings{perkins_simba:_2015,
	address = {Bordeaux, France},
	series = {{EuroSys} '15},
	title = {Simba: tunable end-to-end data consistency for mobile apps},
	isbn = {9781450332385},
	shorttitle = {Simba},
	url = {https://doi.org/10.1145/2741948.2741974},
	doi = {10.1145/2741948.2741974},
	abstract = {Developers of cloud-connected mobile apps need to ensure the consistency of application and user data across multiple devices. Mobile apps demand different choices of distributed data consistency under a variety of usage scenarios. The apps also need to gracefully handle intermittent connectivity and disconnections, limited bandwidth, and client and server failures. The data model of the apps can also be complex, spanning inter-dependent structured and unstructured data, and needs to be atomically stored and updated locally, on the cloud, and on other mobile devices. In this paper we study several popular apps and find that many exhibit undesirable behavior under concurrent use due to inadequate treatment of data consistency. Motivated by the shortcomings, we propose a novel data abstraction, called a sTable, that unifies a tabular and object data model, and allows apps to choose from a set of distributed consistency schemes; mobile apps written to this abstraction can effortlessly sync data with the cloud and other mobile devices while benefiting from end-to-end data consistency. We build Simba, a data-sync service, to demonstrate the utility and practicality of our proposed abstraction, and evaluate it both by writing new apps and porting existing inconsistent apps to make them consistent. Experimental results show that Simba performs well with respect to sync latency, bandwidth consumption, server throughput, and scales for both the number of users and the amount of data.},
	urldate = {2020-02-04},
	booktitle = {Proceedings of the {Tenth} {European} {Conference} on {Computer} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Perkins, Dorian and Agrawal, Nitin and Aranya, Akshat and Yu, Curtis and Go, Younghwan and Madhyastha, Harsha V. and Ungureanu, Cristian},
	month = apr,
	year = {2015},
	pages = {1--16}
}

@inproceedings{kleppmann_local-first_2019,
	address = {Athens, Greece},
	series = {Onward! 2019},
	title = {Local-first software: you own your data, in spite of the cloud},
	isbn = {9781450369954},
	shorttitle = {Local-first software},
	url = {https://doi.org/10.1145/3359591.3359737},
	doi = {10.1145/3359591.3359737},
	abstract = {Cloud apps like Google Docs and Trello are popular because they enable real-time collaboration with colleagues, and they make it easy for us to access our work from all of our devices. However, by centralizing data storage on servers, cloud apps also take away ownership and agency from users. If a service shuts down, the software stops functioning, and data created with that software is lost. In this article we propose local-first software, a set of principles for software that enables both collaboration and ownership for users. Local-first ideals include the ability to work offline and collaborate across multiple devices, while also improving the security, privacy, long-term preservation, and user control of data. We survey existing approaches to data storage and sharing, ranging from email attachments to web apps to Firebase-backed mobile apps, and we examine the trade-offs of each. We look at Conflict-free Replicated Data Types (CRDTs): data structures that are multi-user from the ground up while also being fundamentally local and private. CRDTs have the potential to be a foundational technology for realizing local-first software. We share some of our findings from developing local-first software prototypes at the Ink \& Switch research lab over the course of several years. These experiments test the viability of CRDTs in practice, and explore the user interface challenges for this new data model. Lastly, we suggest some next steps for moving towards local-first software: for researchers, for app developers, and a startup opportunity for entrepreneurs.},
	urldate = {2020-02-04},
	booktitle = {Proceedings of the 2019 {ACM} {SIGPLAN} {International} {Symposium} on {New} {Ideas}, {New} {Paradigms}, and {Reflections} on {Programming} and {Software}},
	publisher = {Association for Computing Machinery},
	author = {Kleppmann, Martin and Wiggins, Adam and van Hardenberg, Peter and McGranaghan, Mark},
	month = oct,
	year = {2019},
	keywords = {CRDTs, collaboration software, data ownership, mobile computing, peer-to-peer communication},
	pages = {154--178}
}

@inproceedings{baquero_problem_2016,
	address = {London, United Kingdom},
	series = {{PaPoC} '16},
	title = {The problem with embedded {CRDT} counters and a solution},
	isbn = {9781450342964},
	url = {https://doi.org/10.1145/2911151.2911159},
	doi = {10.1145/2911151.2911159},
	abstract = {Conflict-free Replicated Data Types (CRDTs) can simplify the design of deterministic eventual consistency. Considering the several CRDTs that have been deployed in production systems, counters are among the first. Counters are apparently simple, with a straightforward inc/dec/read API, but can require complex implementations and several variants have been specified and coded. Unlike sets and registers, that can be adapted to operate inside maps, current counter approaches exhibit anomalies when embedded in maps. Here, we illustrate the anomaly and propose a solution, based on a new counter model and implementation.},
	urldate = {2020-02-04},
	booktitle = {Proceedings of the 2nd {Workshop} on the {Principles} and {Practice} of {Consistency} for {Distributed} {Data}},
	publisher = {Association for Computing Machinery},
	author = {Baquero, Carlos and Almeida, Paulo Sérgio and Lerche, Carl},
	month = apr,
	year = {2016},
	keywords = {CRDTs, distributed counting, eventual consistency},
	pages = {1--3}
}

@article{kleppmann_opsets:_2018,
	title = {{OpSets}: {Sequential} {Specifications} for {Replicated} {Datatypes} ({Extended} {Version})},
	shorttitle = {{OpSets}},
	url = {http://arxiv.org/abs/1805.04263},
	abstract = {We introduce OpSets, an executable framework for specifying and reasoning about the semantics of replicated datatypes that provide eventual consistency in a distributed system, and for mechanically verifying algorithms that implement these datatypes. Our approach is simple but expressive, allowing us to succinctly specify a variety of abstract datatypes, including maps, sets, lists, text, graphs, trees, and registers. Our datatypes are also composable, enabling the construction of complex data structures. To demonstrate the utility of OpSets for analysing replication algorithms, we highlight an important correctness property for collaborative text editing that has traditionally been overlooked; algorithms that do not satisfy this property can exhibit awkward interleaving of text. We use OpSets to specify this correctness property and prove that although one existing replication algorithm satisfies this property, several other published algorithms do not. We also show how OpSets can be used to develop new replicated datatypes: we provide a simple specification of an atomic move operation for trees, an operation that had previously been thought to be impossible to implement without locking. We use the Isabelle/HOL proof assistant to formalise the OpSets approach and produce mechanised proofs of correctness of the main claims in this paper, thereby eliminating the ambiguity of previous informal approaches, and ruling out reasoning errors that could occur in handwritten proofs.},
	urldate = {2020-02-05},
	journal = {arXiv:1805.04263 [cs]},
	author = {Kleppmann, Martin and Gomes, Victor B. F. and Mulligan, Dominic P. and Beresford, Alastair R.},
	month = may,
	year = {2018},
	note = {arXiv: 1805.04263},
	keywords = {Computer Science - Distributed, Parallel, and Cluster Computing}
}

@article{kleppmann_conflict-free_2017,
	title = {A {Conflict}-{Free} {Replicated} {JSON} {Datatype}},
	volume = {28},
	issn = {1045-9219},
	url = {http://arxiv.org/abs/1608.03960},
	doi = {10.1109/TPDS.2017.2697382},
	abstract = {Many applications model their data in a general-purpose storage format such as JSON. This data structure is modified by the application as a result of user input. Such modifications are well understood if performed sequentially on a single copy of the data, but if the data is replicated and modified concurrently on multiple devices, it is unclear what the semantics should be. In this paper we present an algorithm and formal semantics for a JSON data structure that automatically resolves concurrent modifications such that no updates are lost, and such that all replicas converge towards the same state (a conflict-free replicated datatype or CRDT). It supports arbitrarily nested list and map types, which can be modified by insertion, deletion and assignment. The algorithm performs all merging client-side and does not depend on ordering guarantees from the network, making it suitable for deployment on mobile devices with poor network connectivity, in peer-to-peer networks, and in messaging systems with end-to-end encryption.},
	number = {10},
	urldate = {2020-02-05},
	journal = {IEEE Transactions on Parallel and Distributed Systems},
	author = {Kleppmann, Martin and Beresford, Alastair R.},
	month = oct,
	year = {2017},
	note = {arXiv: 1608.03960},
	keywords = {Computer Science - Databases, Computer Science - Distributed, Parallel, and Cluster Computing},
	pages = {2733--2746}
}